%{        
        #include "output.hpp"        
        using namespace output;
        extern int yylineno;
        void yyerror(const char*);
%}
%token VOID INT BYTE B BOOL TRUE FALSE RETURN WHILE BREAK CONTINUE SWITCH CASE DEFAULT COLON SC COMMA LBRACE RBRACE ID NUM STRING


%right IF 
%right ELSE
%right ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADDBINOP
%left MULBINOP
%right NOT 
%left LPAREN RPAREN

%%
Program : Funcs {printProductionRule(1);}
Funcs :  /*epsilon*/ {printProductionRule(2);}
        | FuncsDecl Funcs {printProductionRule(3);}
FuncsDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {printProductionRule(4);}
RetType : Type {printProductionRule(5);}
        | VOID {printProductionRule(6);}
Formals :   /*epsilon*/ {printProductionRule(7);}
        | FormalsList {printProductionRule(8);}
FormalsList : FormalDecl {printProductionRule(9);}
        | FormalDecl COMMA FormalsList {printProductionRule(10);}
FormalDecl : Type ID {printProductionRule(11);}
Statements : Statement {printProductionRule(12);}
        | Statements Statement {printProductionRule(13);}
Statement : LBRACE Statements RBRACE {printProductionRule(14);}
        | Type ID SC {printProductionRule(15);}
        | Type ID ASSIGN Exp SC {printProductionRule(16);}
        | ID ASSIGN Exp SC {printProductionRule(17);}
        | Call SC {printProductionRule(18);}
        | RETURN SC {printProductionRule(19);}
        | RETURN Exp SC {printProductionRule(20);}
        | IF LPAREN Exp RPAREN Statement %prec IF {printProductionRule(21);}
        | IF LPAREN Exp RPAREN Statement ELSE Statement %prec ELSE {printProductionRule(22);}
        | WHILE LPAREN Exp RPAREN Statement {printProductionRule(23);}
        | BREAK SC {printProductionRule(24);}
        | CONTINUE SC {printProductionRule(25);}
        | SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE {printProductionRule(26);}
Call : ID LPAREN ExpList RPAREN {printProductionRule(27);}
        | ID LPAREN RPAREN {printProductionRule(28);}
ExpList : Exp {printProductionRule(29);}
        | Exp COMMA ExpList {printProductionRule(30);}
Type : INT {printProductionRule(31);}
        | BYTE {printProductionRule(32);}
        | BOOL {printProductionRule(33);}
Exp : LPAREN Exp RPAREN {printProductionRule(34);}
        | Exp MULBINOP Exp {printProductionRule(35);}
        | Exp ADDBINOP Exp {printProductionRule(35);}
        | ID {printProductionRule(36);}
        | Call {printProductionRule(37);}
        | NUM  {printProductionRule(38);}
        | NUM B {printProductionRule(39);}
        | STRING {printProductionRule(40);}
        | TRUE {printProductionRule(41);}
        | FALSE {printProductionRule(42);}
        | NOT Exp {printProductionRule(43);}
        | Exp AND Exp {printProductionRule(44);}
        | Exp OR Exp {printProductionRule(45);}
        | Exp EQUALITY Exp {printProductionRule(46);}
        | Exp RELATIONAL Exp {printProductionRule(46);}
        | LPAREN Type RPAREN Exp {printProductionRule(47);}
CaseList : CaseDecl CaseList {printProductionRule(48);} 
        | CaseDecl {printProductionRule(49);}
        | DEFAULT COLON Statements {printProductionRule(50);}
CaseDecl : CASE NUM COLON Statements {printProductionRule(51);}
%%
void yyerror(const char*) { errorSyn (yylineno);}

int main() {
    return yyparse();
}

